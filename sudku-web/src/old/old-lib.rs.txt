#![allow(non_snake_case)]

use leptos::*;
use sudku_grid::{Grid3x3, History, Move};
use wasm_bindgen::prelude::*;

#[wasm_bindgen(start)]
pub fn run() -> Result<(), wasm_bindgen::JsValue> {
    init_wasm_hooks();
    mount_to_body(App);
    Ok(())
}

fn init_wasm_hooks() {
    console_error_panic_hook::set_once();
    tracing_wasm::set_as_global_default();
}

#[component]
fn App(cx: Scope) -> impl IntoView {
    Grid3(cx)
}

#[component]
fn Grid3(cx: Scope) -> impl IntoView {
    let mut grid = Grid3x3::randomized();
    grid.remove_nums(50);
    let (grid, set_grid) = create_signal(cx, grid);
    let (history, set_history) = create_signal(cx, History::new());
    let (last_mv, set_last_mv) = create_signal(cx, None::<Move>);
    create_effect(cx, move |_| {
        //log!("{:?}", last_mv());
        if let Some(mv) = last_mv() {
            let (x, y) = mv.pos;
            //log!("{}", grid.with(|grid| grid[y][x]));
        }
    });
    view! { cx,
        <table>
            {(0..9)
                .map(|y| view! { cx,
                     <tr>
                         {(0..9)
                             .map(|x| {
                                 let num = grid.with(|grid| grid[y][x]);
                                 view! { cx,
                                     <input type="text"
                                         on:keypress=move |ev| {
                                             let key = ev.key().chars().next().unwrap_or('\0');
                                             if !key.is_ascii_digit() {
                                                 ev.prevent_default();
                                             }
                                             let val = key as u8 - b'0';
                                             let valid = grid.with(|grid| {
                                                 grid.pos_is_valid((x, y), val)
                                             });
                                             if !valid {
                                                 ev.prevent_default();
                                             }
                                         }
                                         on:input=move |ev| {
                                             let val = event_target_value(&ev);
                                             let mut val = val.parse::<u8>().unwrap_or(0);
                                             if val > 9 {
                                                 val = 0;
                                             }
                                             set_grid.update(|grid| {
                                                 set_history.update(|hist| {
                                                     hist.push(Move::new((x, y), val, grid[y][x]));
                                                 }); 
                                                 grid[y][x] = val;
                                             });
                                         }
                                         class:given=move || num != 0
                                         class:bold-bottom=move || y % 3 == 2 && y != 8
                                         class:bold-right=move || x % 3 == 2 && x != 8
                                         maxlength=1
                                         disabled={num != 0}
                                         prop:value={grid.with(|grid| {
                                             log!("{}", grid[y][x]);
                                             num_to_str(grid[y][x])
                                         })}
                                         /*
                                         prop:value={
                                             let num = grid.with(|grid| grid[y][x]);
                                             if num == 0 {
                                                 String::new()
                                             } else {
                                                 String::from((num + b'0') as char)
                                             }
                                         }
                                         */
                                     />
                                 }
                             })
                             .collect_view(cx)
                         }
                     </tr>
                })
                .collect_view(cx)
            }
        </table>
        <button
            on:click=move |_| {
                if let Some(mv) = set_history.try_update(|hist| hist.undo()).flatten() {
                    set_last_mv(Some(mv));
                    set_grid.update(|grid| grid[mv.pos.0][mv.pos.1] = mv.prev_num);
                    log!("{}", mv.prev_num);
                }
            }
            prop:disabled=move || history.with(|hist| !hist.can_undo())
        >
            "Undo"
        </button>
        <button
            on:click=move |_| {
                if let Some(mv) = set_history.try_update(|hist| hist.redo()).flatten() {
                    set_last_mv(Some(mv));
                    set_grid.update(|grid| grid[mv.pos.0][mv.pos.1] = mv.num);
                    log!("{}", mv.num);
                }
            }
            prop:disabled=move || history.with(|hist| !hist.can_redo())
        >
            "Redo"
        </button>
    }
}

#[component]
fn GridRow(cx: Scope) -> impl IntoView {
    view! { cx,
        <tr>
        </tr>
    }
}

fn #[component]
fn GridSquare(cx: Scope) -> impl IntoView {
    view! { cx,
        //
    }
}

fn num_to_str(n: u8) -> &'static str {
    match n {
        1 => "1",
        2 => "2",
        3 => "3",
        4 => "4",
        5 => "5",
        6 => "6",
        7 => "7",
        8 => "8",
        9 => "9",
        10 => "A",
        11 => "B",
        12 => "C",
        13 => "D",
        14 => "E",
        15 => "F",
        16 => "G",
        _ => "",
    }
}
